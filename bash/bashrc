if [ -f /etc/bashrc ]; then
    source /etc/bashrc
fi
if [ -f /etc/bash.bashrc ]; then
    source /etc/bash.bashrc
fi
if [ -f "${HOME}/.profile" ]; then
    source "${HOME}/.profile"
fi
alias eh="echo ¯\\\_\(ツ\)_/¯ | pbcopy"
alias ehh="eh"
alias .1='cd ..'
alias ..='cd ..'
alias .2='cd ../..'
alias ....='cd ../..'
alias .3='cd ../../..'
alias .4='cd ../../../..'
alias .5='cd ../../../../..'
alias l='ls -aF'
alias ll='ls -alF'

# list only hidden directories and files
alias l.='ls -dF .*'
alias ll.'=ls -ldF .*'
alias tmux='tmux -2'
if [[ $OSTYPE == darwin* ]]; then
    alias showFiles='defaults write com.apple.finder AppleShowAllFiles \
YES; killall Finder'
    alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; \
killall Finder'
fi
alias sshid='ssh-add ~/.ssh/id_rsa'
alias ppass='PASSWORD_STORE_DIR=~/.password-store/personal/ pass'
alias pp='ppass'

# lingbib password store
alias lb-pass='PASSWORD_STORE_DIR=~/.password-store/shared-projects\
/lingbib/ pass'

# common logins
alias amazon='pp -c misc/amazon'
alias amex='pp -c finances/amex'
alias bb='pp -c misc/bitbucket'
alias chess='pp -c misc/chess'
alias delta='pp -c travel/delta'
alias fmail='pp -c email/fastmail/password'
alias kb='pp -c keybase/passphrase'
alias msufcu='pp -c finances/msufcu'
if type hub >/dev/null 2>&1; then
    alias git='hub'
fi
alias g='git status -sb'
alias gp='git pull'
alias gpr='git pull --rebase'
alias gpp='git pull --rebase && git push'
alias ga='git add'
alias gc='git commit'
alias gcn='git commit --no-edit'
alias gce='git commit -e'
alias gces='git commit -eS'
alias gca='git commit --amend'
alias gcah='git commit --amend -C HEAD'
alias gcv='git commit --no-verify'
alias gdv='git diff'
alias gdc='git diff --cached'
alias gl='git log --oneline --decorate --graph'
alias gla='git log --oneline --decorate --graph --all'
alias gt='git tag'
alias grc='git rebase --continue'
alias gsl='git stash list'
alias gss='git stash save'
if command -v kubectl 1>/dev/null 2>&1; then
    alias k='kubectl'
fi
if [ -d /usr/local/etc/bash_completion.d ]; then
    for f in /usr/local/etc/bash_completion.d/*; do
        . "${f}"
    done
fi
if [ -d /opt/homebrew/etc/bash_completion.d ]; then
    for f in /opt/homebrew/etc/bash_completion.d/*; do
        . "${f}"
    done
fi
if [ -f /usr/local/etc/bash_completion.d/pass ]; then
    source /usr/local/etc/bash_completion.d/pass
fi
# personal completion
_ppass(){
    PASSWORD_STORE_DIR=~/.password-store/personal/ _pass
}

complete -o filenames -o nospace -F _ppass ppass

_pp(){
    _ppass
}

complete -o filenames -o nospace -F _pp pp

# lingbib completion
_lb-pass(){
    PASSWORD_STORE_DIR=~/.password-store/shared-projects/lingbib/ _pass
}

complete -o filenames -o nospace -F _lb-pass lb-pass
if command -v pyenv 1>/dev/null 2>&1; then
    # Only needed if autcompletion isn't already in Hombrew bash completion dir
    #source <(kubectl completion bash)
    complete -o default -F __start_kubectl k
fi
RED="\[\e[31m\]"
LIGHT_RED="\[\e[91m\]"
GREEN="\[\e[32m\]"
LIGHT_GREEN="\[\e[92m\]"
YELLOW="\[\e[33m\]"
LIGHT_YELLOW="\[\e[93m\]"
BLUE="\[\e[34m\]"
LIGHT_BLUE="\[\e[94m\]"
MAGENTA="\[\e[35m\]"
LIGHT_MAGENTA="\[\e[95m\]"
CYAN="\[\e[36m\]"
LIGHT_CYAN="\[\e[96m\]"
LIGHT_GREY="\[\e[37m\]"
LIGHT_GRAY="\[\e[37m\]"
WHITE="\[\e[97m\]"
COLOR_RESET="\[\e[0m\]"
MY_PS1_SEP=" ${WHITE}█${COLOR_RESET} "
function is_git_repository {
    git branch > /dev/null 2>&1
}
function set_git_branch {
    # Capture the output of the "git status" command.
    git_status="$(git status 2> /dev/null)"

    # Set color based on clean/staged/dirty
    clean_pattern="working (tree|directory) clean"
    if [[ ${git_status} =~ ${clean_pattern} ]]; then
        state="${LIGHT_GREEN}"
    elif [[ ${git_status} =~ "Changes to be committed" ]]; then
        state="${LIGHT_YELLOW}"
    else
        state="${RED}"
    fi

    # Set arrow icon based on status against remote.
    remote_pattern="(# )?Your branch is (ahead of|behind)"
    if [[ ${git_status} =~ ${remote_pattern} ]]; then
        if [[ ${BASH_REMATCH[2]} == "ahead of" ]]; then
            remote="↑"
        else
            remote="↓"
        fi
    else
        remote=""
    fi
    diverge_pattern="(# )?Your branch and (.*) have diverged"
    if [[ ${git_status} =~ ${diverge_pattern} ]]; then
        remote="↕"
    fi

    # Get the name of the branch.
    branch_pattern="^(# )?On branch ([^${IFS}]*)"
    detached_head_pattern="HEAD detached from"
    if [[ ${git_status} =~ ${branch_pattern} ]]; then
        branch=${BASH_REMATCH[2]}
    elif [[ ${git_status} =~ ${detached_head_pattern} ]]; then
        branch="HEAD"
    fi

    # Set the final branch string.
    BRANCH="${MY_PS1_SEP}${state}(${branch})${remote}${COLOR_RESET}"
}
function set_virtualenv () {
    if test -z "${VIRTUAL_ENV}" && test -z "${CONDA_DEFAULT_ENV}"; then
        MY_VENV=""
    else
        if test -z "${VIRTUAL_ENV}"; then
            MY_VENV="${LIGHT_GREY}[${CONDA_DEFAULT_ENV}]${COLOR_REST}\
${MY_PS1_SEP}"
        else
            MY_VENV="${LIGHT_GREY}[${VIRTUAL_ENV##*/}]${COLOR_RESET}\
${MY_PS1_SEP}"
        fi
    fi
}
function set_prompt_symbol () {
    if test $1 -eq 0 ; then
        PROMPT_SYMBOL="\$"
    else
        PROMPT_SYMBOL="${RED}\$${COLOR_RESET}"
    fi
}
strip_color () {
    COLOR_REGEX='s/\\\[\\e\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]\\\]//g'
    if [[ $OSTYPE == darwin* ]]; then
        sed -Ee $COLOR_REGEX <<< """$1"""
    else
        sed -re $COLOR_REGEX <<< """$1"""
    fi
}

get_ps1_less_pwd () {
    PS1_LESS_PWD=$(printf "%s%s%s%s" \
                          "$(strip_color "${MY_VENV}")" \
                          "$(whoami)@$(hostname -s)" \
                          "$(strip_color "${MY_PS1_SEP}")" \
                          "$(strip_color "${BRANCH}")")
}
function set_bash_prompt () {
    # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
    # return value of the last command.
    set_prompt_symbol $?

    # Get virtualenv info
    set_virtualenv

    # Set the BRANCH variable.
    if is_git_repository ; then
        set_git_branch
    else
        BRANCH=''
    fi

    # get PS1_LESS_PWD to calculate length remaining
    get_ps1_less_pwd

    # get truncated PWD
    # loosely based on http://stackoverflow.com/a/26555347/2571049
    MY_PWD=$(pwd | awk -F/ -v "u=$PS1_LESS_PWD" -v "n=$(tput cols)" \
                       -v "h=^$HOME" \
                       '{sub(h,"~"); u=length(u); n=n-u-1; b=$1} \
                       length($0)<=n || NF==2 {print; next;} \
                       NF>2 {b=b"/.../"; e=$NF; n-=length(b $NF); \
                       for (i=NF-1; i>2 && n>length(e $i)+1; i--) e=$i"/"e;} {print b e;}')

    # Set the bash prompt variable.
    PS1="
${MY_VENV}\
${WHITE}\u${COLOR_RESET}\
${LIGHT_GREEN}@${COLOR_RESET}\
${LIGHT_MAGENTA}\h${COLOR_RESET}\
${MY_PS1_SEP}\
${LIGHT_CYAN}${MY_PWD}${COLOR_RESET}\
${BRANCH}
${PROMPT_SYMBOL} "
}
PROMPT_COMMAND=set_bash_prompt
export CLICOLOR=1
export LSCOLORS=gxBxhxDxfxhxhxhxhxcxcx
if command -v pyenv 1>/dev/null 2>&1; then
    eval "$(pyenv init -)"
fi

if command -v pyenv-virtualenv-init 1>/dev/null 2>&1; then
    eval "$(pyenv virtualenv-init -)"
fi

gpip2(){
    PIP_REQUIRE_VIRTUALENV="" pip2 "$@"
}

gpip3(){
    PIP_REQUIRE_VIRTUALENV="" pip3 "$@"
}

gpip(){
    PIP_REQUIRE_VIRTUALENV="" pip "$@"
}
if command -v rbenv 1>/dev/null 2>&1; then
    eval "$(rbenv init -)"
fi
